From 5073c783999872e5ae66f45ae7f2e1835da106b0 Mon Sep 17 00:00:00 2001
From: MarkusVolk <f_l_k@t-online.de>
Date: Sun, 3 Jan 2016 08:48:21 +0100
Subject: [PATCH 70534/70534] Revert "arm: add a cpu flag for the VFPv2 vector
 mode"

This reverts commit e2710e790c09e49e86baa58c6063af0097cc8cb0.

Conflicts:
	libavutil/arm/cpu.h
	libavutil/cpu.h
	libavutil/version.h

Signed-off-by: MarkusVolk <f_l_k@t-online.de>
---
 libavcodec/arm/dcadsp_init_arm.c     | 4 ++--
 libavcodec/arm/fft_init_arm.c        | 2 +-
 libavcodec/arm/fmtconvert_init_arm.c | 2 +-
 libavutil/arm/cpu.c                  | 8 --------
 libavutil/arm/cpu.h                  | 9 +++++----
 libavutil/cpu.c                      | 2 --
 libavutil/cpu.h                      | 2 --
 libavutil/version.h                  | 6 +++---
 tests/checkasm/checkasm.c            | 1 -
 9 files changed, 12 insertions(+), 24 deletions(-)

diff --git a/libavcodec/arm/dcadsp_init_arm.c b/libavcodec/arm/dcadsp_init_arm.c
index 0f2e4c4..d7dc654 100644
--- a/libavcodec/arm/dcadsp_init_arm.c
+++ b/libavcodec/arm/dcadsp_init_arm.c
@@ -53,7 +53,7 @@ av_cold void ff_dcadsp_init_arm(DCADSPContext *s)
 {
     int cpu_flags = av_get_cpu_flags();
 
-    if (have_vfp_vm(cpu_flags)) {
+    if (have_vfp(cpu_flags) && !have_vfpv3(cpu_flags)) {
         s->lfe_fir[0]      = ff_dca_lfe_fir32_vfp;
         s->lfe_fir[1]      = ff_dca_lfe_fir64_vfp;
         s->qmf_32_subbands = ff_dca_qmf_32_subbands_vfp;
@@ -68,7 +68,7 @@ av_cold void ff_synth_filter_init_arm(SynthFilterContext *s)
 {
     int cpu_flags = av_get_cpu_flags();
 
-    if (have_vfp_vm(cpu_flags))
+    if (have_vfp(cpu_flags) && !have_vfpv3(cpu_flags))
         s->synth_filter_float = ff_synth_filter_float_vfp;
     if (have_neon(cpu_flags))
         s->synth_filter_float = ff_synth_filter_float_neon;
diff --git a/libavcodec/arm/fft_init_arm.c b/libavcodec/arm/fft_init_arm.c
index 055c2c1..5087f5f 100644
--- a/libavcodec/arm/fft_init_arm.c
+++ b/libavcodec/arm/fft_init_arm.c
@@ -40,7 +40,7 @@ av_cold void ff_fft_init_arm(FFTContext *s)
 {
     int cpu_flags = av_get_cpu_flags();
 
-    if (have_vfp_vm(cpu_flags)) {
+    if (have_vfp(cpu_flags) && !have_vfpv3(cpu_flags)) {
         s->fft_calc     = ff_fft_calc_vfp;
 #if CONFIG_MDCT
         s->imdct_half   = ff_imdct_half_vfp;
diff --git a/libavcodec/arm/fmtconvert_init_arm.c b/libavcodec/arm/fmtconvert_init_arm.c
index a734dec..0221ebb 100644
--- a/libavcodec/arm/fmtconvert_init_arm.c
+++ b/libavcodec/arm/fmtconvert_init_arm.c
@@ -41,7 +41,7 @@ av_cold void ff_fmt_convert_init_arm(FmtConvertContext *c, AVCodecContext *avctx
 {
     int cpu_flags = av_get_cpu_flags();
 
-    if (have_vfp_vm(cpu_flags)) {
+    if (have_vfp(cpu_flags)) {
         if (!have_vfpv3(cpu_flags)) {
             c->int32_to_float_fmul_scalar = ff_int32_to_float_fmul_scalar_vfp;
             c->int32_to_float_fmul_array8 = ff_int32_to_float_fmul_array8_vfp;
diff --git a/libavutil/arm/cpu.c b/libavutil/arm/cpu.c
index 3889ef0..1399606 100644
--- a/libavutil/arm/cpu.c
+++ b/libavutil/arm/cpu.c
@@ -129,18 +129,10 @@ int ff_get_cpu_flags_arm(void)
     if (flags & (AV_CPU_FLAG_VFPV3 | AV_CPU_FLAG_NEON))
         flags |= AV_CPU_FLAG_ARMV6T2;
     else if (flags & (AV_CPU_FLAG_ARMV6T2 | AV_CPU_FLAG_ARMV6))
-    /* Some functions use the 'setend' instruction which is deprecated on ARMv8
-     * and serializing on some ARMv7 cores. This ensures such functions
-     * are only enabled on ARMv6. */
-        flags |= AV_CPU_FLAG_SETEND;
 
     if (flags & AV_CPU_FLAG_ARMV6T2)
         flags |= AV_CPU_FLAG_ARMV6;
 
-    /* set the virtual VFPv2 vector mode flag */
-    if ((flags & AV_CPU_FLAG_VFP) && !(flags & (AV_CPU_FLAG_VFPV3 | AV_CPU_FLAG_NEON)))
-        flags |= AV_CPU_FLAG_VFP_VM;
-
     return flags;
 }
 
diff --git a/libavutil/arm/cpu.h b/libavutil/arm/cpu.h
index 27a2eda..1c60265 100644
--- a/libavutil/arm/cpu.h
+++ b/libavutil/arm/cpu.h
@@ -31,9 +31,10 @@
 #define have_neon(flags)    CPUEXT(flags, NEON)
 #define have_setend(flags)  CPUEXT(flags, SETEND)
 
-/* some functions use the VFPv2 vector mode which is deprecated in ARMv7-A
- * and might trap on such CPU depending on the OS configuration */
-#define have_vfp_vm(flags)                                              \
-    (have_armv6(flags) && ((flags) & AV_CPU_FLAG_VFP_VM))
+/* Some functions use the 'setend' instruction which is deprecated on ARMv8
+ * and serializing on some ARMv7 cores. This macro ensures such functions
+ * are only enabled on ARMv6. */
+#define have_setend(flags)                                              \
+    (have_armv6(flags) && !(have_vfpv3(flags) || have_neon(flags)))
 
 #endif /* AVUTIL_ARM_CPU_H */
diff --git a/libavutil/cpu.c b/libavutil/cpu.c
index cd55d3b..ee88198 100644
--- a/libavutil/cpu.c
+++ b/libavutil/cpu.c
@@ -152,7 +152,6 @@ int av_parse_cpu_flags(const char *s)
         { "armv6",    NULL, 0, AV_OPT_TYPE_CONST, { .i64 = AV_CPU_FLAG_ARMV6    },    .unit = "flags" },
         { "armv6t2",  NULL, 0, AV_OPT_TYPE_CONST, { .i64 = AV_CPU_FLAG_ARMV6T2  },    .unit = "flags" },
         { "vfp",      NULL, 0, AV_OPT_TYPE_CONST, { .i64 = AV_CPU_FLAG_VFP      },    .unit = "flags" },
-        { "vfp_vm",   NULL, 0, AV_OPT_TYPE_CONST, { .i64 = AV_CPU_FLAG_VFP_VM   },    .unit = "flags" },
         { "vfpv3",    NULL, 0, AV_OPT_TYPE_CONST, { .i64 = AV_CPU_FLAG_VFPV3    },    .unit = "flags" },
         { "neon",     NULL, 0, AV_OPT_TYPE_CONST, { .i64 = AV_CPU_FLAG_NEON     },    .unit = "flags" },
 #elif ARCH_AARCH64
@@ -231,10 +230,8 @@ int av_parse_cpu_caps(unsigned *flags, const char *s)
         { "armv6",    NULL, 0, AV_OPT_TYPE_CONST, { .i64 = AV_CPU_FLAG_ARMV6    },    .unit = "flags" },
         { "armv6t2",  NULL, 0, AV_OPT_TYPE_CONST, { .i64 = AV_CPU_FLAG_ARMV6T2  },    .unit = "flags" },
         { "vfp",      NULL, 0, AV_OPT_TYPE_CONST, { .i64 = AV_CPU_FLAG_VFP      },    .unit = "flags" },
-        { "vfp_vm",   NULL, 0, AV_OPT_TYPE_CONST, { .i64 = AV_CPU_FLAG_VFP_VM   },    .unit = "flags" },
         { "vfpv3",    NULL, 0, AV_OPT_TYPE_CONST, { .i64 = AV_CPU_FLAG_VFPV3    },    .unit = "flags" },
         { "neon",     NULL, 0, AV_OPT_TYPE_CONST, { .i64 = AV_CPU_FLAG_NEON     },    .unit = "flags" },
-        { "setend",   NULL, 0, AV_OPT_TYPE_CONST, { .i64 = AV_CPU_FLAG_SETEND   },    .unit = "flags" },
 #elif ARCH_AARCH64
         { "armv8",    NULL, 0, AV_OPT_TYPE_CONST, { .i64 = AV_CPU_FLAG_ARMV8    },    .unit = "flags" },
         { "neon",     NULL, 0, AV_OPT_TYPE_CONST, { .i64 = AV_CPU_FLAG_NEON     },    .unit = "flags" },
@@ -317,7 +316,6 @@ static const struct {
     { AV_CPU_FLAG_ARMV6,     "armv6"      },
     { AV_CPU_FLAG_ARMV6T2,   "armv6t2"    },
     { AV_CPU_FLAG_VFP,       "vfp"        },
-    { AV_CPU_FLAG_VFP_VM,    "vfp_vm"     },
     { AV_CPU_FLAG_VFPV3,     "vfpv3"      },
     { AV_CPU_FLAG_NEON,      "neon"       },
     { AV_CPU_FLAG_SETEND,    "setend"     },
diff --git a/libavutil/cpu.h b/libavutil/cpu.h
index cc4e30c..562a248 100644
--- a/libavutil/cpu.h
+++ b/libavutil/cpu.h
@@ -64,8 +64,6 @@
 #define AV_CPU_FLAG_VFPV3        (1 << 4)
 #define AV_CPU_FLAG_NEON         (1 << 5)
 #define AV_CPU_FLAG_ARMV8        (1 << 6)
-#define AV_CPU_FLAG_VFP_VM       (1 << 7) ///< VFPv2 vector mode, deprecated in ARMv7-A and unavailable in various CPUs implementations
-#define AV_CPU_FLAG_SETEND       (1 <<16)
 
 /**
  * Return the flags which specify extensions supported by the CPU.

diff --git a/tests/checkasm/checkasm.c b/tests/checkasm/checkasm.c
index 7f2cf8e..c8ff4d7 100644
--- a/tests/checkasm/checkasm.c
+++ b/tests/checkasm/checkasm.c
@@ -111,7 +111,6 @@ static const struct {
     { "ARMV6",    "armv6",    AV_CPU_FLAG_ARMV6 },
     { "ARMV6T2",  "armv6t2",  AV_CPU_FLAG_ARMV6T2 },
     { "VFP",      "vfp",      AV_CPU_FLAG_VFP },
-    { "VFP_VM",   "vfp_vm",   AV_CPU_FLAG_VFP_VM },
     { "VFPV3",    "vfp3",     AV_CPU_FLAG_VFPV3 },
     { "NEON",     "neon",     AV_CPU_FLAG_NEON },
 #elif ARCH_PPC
-- 
2.1.4

